[{"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\index.js":"1","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\App.js":"2","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\reportWebVitals.js":"3","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\ApolloProvider.js":"4","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\pages\\Home.js":"5","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\pages\\Login.js":"6","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\pages\\Register.js":"7","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\MenuBar.js":"8","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\PostCard.js":"9","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\util\\hooks.js":"10","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\context\\auth.js":"11","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\util\\AuthRoute.js":"12","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\PostForm.js":"13","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\util\\graphql.js":"14","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\pages\\SinglePost.js":"15","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\LikeButton.js":"16","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\util\\MyPopup.js":"17","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\DeleteButton.js":"18"},{"size":482,"mtime":1611495224000,"results":"19","hashOfConfig":"20"},{"size":1577,"mtime":1611900973605,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":1274,"mtime":1611940075007,"results":"23","hashOfConfig":"20"},{"size":4872,"mtime":1611921985122,"results":"24","hashOfConfig":"20"},{"size":2725,"mtime":1611825669687,"results":"25","hashOfConfig":"20"},{"size":3826,"mtime":1611580356093,"results":"26","hashOfConfig":"20"},{"size":1910,"mtime":1611581274929,"results":"27","hashOfConfig":"20"},{"size":1908,"mtime":1611928848433,"results":"28","hashOfConfig":"20"},{"size":443,"mtime":1611500650763,"results":"29","hashOfConfig":"20"},{"size":1521,"mtime":1611583572095,"results":"30","hashOfConfig":"20"},{"size":478,"mtime":1611584873020,"results":"31","hashOfConfig":"20"},{"size":2369,"mtime":1611909578909,"results":"32","hashOfConfig":"20"},{"size":5326,"mtime":1611913339857,"results":"33","hashOfConfig":"20"},{"size":8983,"mtime":1611928975177,"results":"34","hashOfConfig":"20"},{"size":1538,"mtime":1611929023172,"results":"35","hashOfConfig":"20"},{"size":220,"mtime":1611928649049,"results":"36","hashOfConfig":"20"},{"size":1551,"mtime":1611928771955,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"1cdbw86",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"41"},"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\index.js",["85","86"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport ApolloProvider from \"./ApolloProvider\";\n\nReactDOM.render(ApolloProvider, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["87","88"],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\App.js",[],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\reportWebVitals.js",[],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\ApolloProvider.js",[],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\pages\\Home.js",["89","90","91","92","93","94"],"import React, { useContext, useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n    gql,\r\n    useQuery,\r\n    useSubscription,\r\n    NetworkStatus,\r\n    useApolloClient,\r\n} from \"@apollo/client\";\r\n\r\nimport { Grid, Transition } from \"semantic-ui-react\";\r\n\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport {\r\n    CREATE_COMMENT_SUBSCRIPTION,\r\n    DELETE_COMMENT_SUBSCRIPTION,\r\n    DELETE_SUBSCRIPTION,\r\n    FETCH_POSTS_QUERY,\r\n    FETCH_POSTS_SUBSCRIPTION,\r\n    LIKE_SUBSCRIPTION,\r\n    POSTS_SUBSCRIPTION,\r\n} from \"../util/graphql\";\r\n\r\nconst Posts = (props) => {\r\n    // const [posts, setPosts] = useState();\r\n\r\n    const { subscribeToMore, data, error, refetch } = useQuery(\r\n        FETCH_POSTS_QUERY\r\n    );\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [refetch]);\r\n\r\n    /*\r\n        NEW POST SUBSCRIPTIONS\r\n    */\r\n    const subscribeToNewPost = useCallback(\r\n        () =>\r\n            subscribeToMore({\r\n                document: POSTS_SUBSCRIPTION,\r\n                updateQuery: (prevData, { subscriptionData }) => {\r\n                    return {\r\n                        getPosts: [\r\n                            subscriptionData.data.newPost,\r\n                            ...prevData.getPosts,\r\n                        ],\r\n                    };\r\n                },\r\n            }),\r\n        [subscribeToMore]\r\n    );\r\n\r\n    /*\r\n        FETCH POSTS SUBSCRIPTIONS\r\n    */\r\n    // const subscribeToFetchPosts = useCallback(\r\n    //     () =>\r\n    //         subscribeToMore({\r\n    //             document: FETCH_POSTS_SUBSCRIPTION,\r\n    //         }),\r\n    //     [subscribeToMore]\r\n    // );\r\n\r\n    /*\r\n        LIKE POST SUBSCRIPTIONS\r\n    */\r\n    const subscribeToLikePost = useCallback(\r\n        () =>\r\n            subscribeToMore({\r\n                document: LIKE_SUBSCRIPTION,\r\n            }),\r\n        [subscribeToMore]\r\n    );\r\n\r\n    /*\r\n        DELETE POST SUBSCRIPTIONS\r\n    */\r\n    const subscribeToDeletePost = useCallback(\r\n        () =>\r\n            subscribeToMore({\r\n                document: DELETE_SUBSCRIPTION,\r\n                updateQuery: (prevData, { subscriptionData }) => {\r\n                    return {\r\n                        getPosts: [\r\n                            ...prevData.getPosts.filter(\r\n                                (post) =>\r\n                                    post.id !==\r\n                                    subscriptionData.data.deletePost.id\r\n                            ),\r\n                        ],\r\n                    };\r\n                },\r\n            }),\r\n        [subscribeToMore]\r\n    );\r\n\r\n    /*\r\n        NEW COMMENT SUBSCRIPTIONS\r\n    */\r\n    const subscribeToNewComment = useCallback(\r\n        () =>\r\n            subscribeToMore({\r\n                document: CREATE_COMMENT_SUBSCRIPTION,\r\n            }),\r\n        [subscribeToMore]\r\n    );\r\n\r\n    /*\r\n        DELETE COMMENT SUBSCRIPTIONS\r\n    */\r\n    const subscribeToDeleteComment = useCallback(\r\n        () =>\r\n            subscribeToMore({\r\n                document: DELETE_COMMENT_SUBSCRIPTION,\r\n            }),\r\n        [subscribeToMore]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // subscribeToFetchPosts();\r\n        subscribeToDeletePost();\r\n        subscribeToNewPost();\r\n        subscribeToLikePost();\r\n        subscribeToNewComment();\r\n        subscribeToDeleteComment();\r\n    }, [\r\n        // subscribeToFetchPosts,\r\n        subscribeToDeletePost,\r\n        subscribeToNewPost,\r\n        subscribeToLikePost,\r\n        subscribeToNewComment,\r\n        subscribeToDeleteComment,\r\n    ]);\r\n\r\n    if (error) {\r\n        return `Error ${error}`;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid columns={3}>\r\n                <Grid.Row>\r\n                    <Transition.Group>\r\n                        {data &&\r\n                            data.getPosts.map((post) => (\r\n                                <Grid.Column\r\n                                    key={post.postId}\r\n                                    style={{ marginBottom: 20 }}\r\n                                >\r\n                                    <PostCard post={post} />\r\n                                </Grid.Column>\r\n                            ))}\r\n                    </Transition.Group>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Home = () => {\r\n    const { user } = useContext(AuthContext);\r\n    return (\r\n        <Grid.Row>\r\n            <Grid.Row className=\"page-title\">\r\n                <h1>Recent Posts</h1>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                {user && (\r\n                    <Grid.Column>\r\n                        <PostForm />\r\n                    </Grid.Column>\r\n                )}\r\n                <Posts />\r\n            </Grid.Row>\r\n        </Grid.Row>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\pages\\Login.js",[],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\pages\\Register.js",[],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\MenuBar.js",["95"],"import React, { useState, useContext } from \"react\";\r\nimport { Menu, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/auth\";\r\n\r\nconst MenuBar = () => {\r\n    const { user, logout } = useContext(AuthContext);\r\n    const pathname = window.location.pathname;\r\n    // /login = login\r\n    const path = pathname === \"/\" ? \"home\" : pathname.substr(1);\r\n    const [activeItem, setActiveItem] = useState(path);\r\n\r\n    const handleItemClick = (e, { name }) => setActiveItem(name);\r\n\r\n    const menuBar = user ? (\r\n        <>\r\n            <Menu.Item\r\n                name={user.username}\r\n                active\r\n                onClick={handleItemClick}\r\n                as={Link}\r\n                to=\"/\"\r\n            />\r\n\r\n            <Menu.Menu position=\"right\">\r\n                <Menu.Item name=\"logout\" onClick={logout} />\r\n            </Menu.Menu>\r\n        </>\r\n    ) : (\r\n        <>\r\n            <Menu.Item\r\n                name=\"home\"\r\n                active={activeItem === \"home\"}\r\n                onClick={handleItemClick}\r\n                as={Link}\r\n                to=\"/\"\r\n            />\r\n\r\n            <Menu.Menu position=\"right\">\r\n                <Menu.Item\r\n                    name=\"login\"\r\n                    active={activeItem === \"login\"}\r\n                    onClick={handleItemClick}\r\n                    as={Link}\r\n                    to=\"/login\"\r\n                />\r\n                <Menu.Item\r\n                    name=\"register\"\r\n                    active={activeItem === \"register\"}\r\n                    onClick={handleItemClick}\r\n                    as={Link}\r\n                    to=\"/register\"\r\n                />\r\n            </Menu.Menu>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n            {menuBar}\r\n        </Menu>\r\n    );\r\n};\r\n\r\nexport default MenuBar;\r\n","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\PostCard.js",["96"],"import React, { useContext } from \"react\";\r\nimport { Button, Card, Icon, Image, Label, Popup } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../context/auth\";\r\nimport LikeButton from \"./LikeButton\";\r\nimport DeleteButton from \"./DeleteButton\";\r\nimport MyPopup from \"../util/MyPopup\";\r\n\r\nconst PostCard = ({\r\n    post: { body, createdAt, id, username, likeCount, commentCount, likes },\r\n}) => {\r\n    const { user } = useContext(AuthContext);\r\n\r\n    return (\r\n        <Card fluid>\r\n            <Card.Content>\r\n                <Image\r\n                    floated=\"right\"\r\n                    size=\"mini\"\r\n                    src=\"https://react.semantic-ui.com/images/avatar/large/elliot.jpg\"\r\n                />\r\n                <Card.Header>{username}</Card.Header>\r\n                <Card.Meta as={Link} to={`/posts/${id}`}>\r\n                    {moment(createdAt).fromNow()}\r\n                </Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n                <MyPopup content=\"Comment on post\">\r\n                    <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n                        <Button color=\"blue\" basic>\r\n                            <Icon name=\"comments\" style={{ margin: 0 }} />\r\n                        </Button>\r\n                        <Label basic color=\"blue\" pointing=\"left\">\r\n                            {commentCount}\r\n                        </Label>\r\n                    </Button>\r\n                </MyPopup>\r\n\r\n                {user && user.username === username && (\r\n                    <DeleteButton postId={id} />\r\n                )}\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PostCard;\r\n","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\util\\hooks.js",["97"],"import React, { useState } from \"react\";\r\n\r\nexport const useForm = (callback, initialState = {}) => {\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const onChange = (e) => {\r\n        setValues({ ...values, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        callback();\r\n    };\r\n\r\n    return {\r\n        onChange,\r\n        onSubmit,\r\n        values,\r\n    };\r\n};\r\n","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\context\\auth.js",["98"],"import React, { useState, useReducer, createContext } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst AuthContext = createContext({\r\n    user: null,\r\n    login: (userData) => {},\r\n    logout: () => {},\r\n});\r\n\r\nconst initialState = { user: null };\r\n\r\nif (localStorage.getItem(\"token\")) {\r\n    const decodedToken = jwtDecode(localStorage.getItem(\"token\"));\r\n    if (decodedToken.exp * 1000 < new Date()) {\r\n        localStorage.removeItem(\"token\");\r\n    } else {\r\n        initialState.user = decodedToken;\r\n    }\r\n}\r\n\r\nfunction authReducer(state, action) {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n            };\r\n        case \"LOGOUT\":\r\n            return {\r\n                ...state,\r\n                user: null,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n    const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n    function login(userData) {\r\n        localStorage.setItem(\"token\", userData.token);\r\n        dispatch({\r\n            type: \"LOGIN\",\r\n            payload: userData,\r\n        });\r\n    }\r\n\r\n    function logout() {\r\n        localStorage.removeItem(\"token\");\r\n        dispatch({\r\n            type: \"LOGOUT\",\r\n        });\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{ user: state.user, login, logout }}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\n\r\nexport { AuthContext, AuthProvider };\r\n","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\util\\AuthRoute.js",[],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\PostForm.js",["99","100","101"],"import React, { useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { useForm } from \"../util/hooks\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\nimport { CREATE_POST_MUTATION, FETCH_POSTS_QUERY } from \"../util/graphql\";\r\n\r\nconst PostForm = () => {\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const { values, onChange, onSubmit } = useForm(createPostCallback, {\r\n        body: \"\",\r\n    });\r\n\r\n    const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n        variables: values,\r\n        update(proxy, result) {\r\n            // const data = proxy.readQuery({\r\n            //     query: FETCH_POSTS_QUERY,\r\n            // });\r\n            // let newData = [...data.getPosts];\r\n            // newData = [result.data.createPost, ...newData];\r\n            // proxy.writeQuery({\r\n            //     query: FETCH_POSTS_QUERY,\r\n            //     data: {\r\n            //         ...data,\r\n            //         getPosts: {\r\n            //             newData,\r\n            //         },\r\n            //     },\r\n            // });\r\n            values.body = \"\";\r\n        },\r\n        onError(err) {\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n        },\r\n    });\r\n\r\n    function createPostCallback() {\r\n        createPost();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={onSubmit}>\r\n                <h2>Create a post: </h2>\r\n                <Form.Field>\r\n                    <Form.Input\r\n                        placeholder=\"Hi World\"\r\n                        name=\"body\"\r\n                        onChange={onChange}\r\n                        value={values.body}\r\n                        error={errors.body ? true : false}\r\n                    />\r\n                    <Button type=\"submit\" color=\"teal\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Field>\r\n            </Form>\r\n            {Object.keys(errors).length > 0 && (\r\n                <div className=\"ui error message\">\r\n                    <ul className=\"list\">\r\n                        {Object.values(errors).map((error) => (\r\n                            <li key={error}>{error}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostForm;\r\n","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\util\\graphql.js",[],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\pages\\SinglePost.js",["102","103","104","105"],"import React, {\r\n    useCallback,\r\n    useContext,\r\n    useEffect,\r\n    useState,\r\n    useRef,\r\n} from \"react\";\r\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    Form,\r\n    Grid,\r\n    Icon,\r\n    Image,\r\n    Input,\r\n    Label,\r\n} from \"semantic-ui-react\";\r\nimport LikeButton from \"../components/LikeButton\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport moment from \"moment\";\r\nimport DeleteButton from \"../components/DeleteButton\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n    CREATE_COMMENT_MUTATION,\r\n    CREATE_COMMENT_SUBSCRIPTION,\r\n    DELETE_COMMENT_SUBSCRIPTION,\r\n    DELETE_SUBSCRIPTION,\r\n    FETCH_POST_QUERY,\r\n    LIKE_SUBSCRIPTION,\r\n} from \"../util/graphql\";\r\nimport MyPopup from \"../util/MyPopup\";\r\n\r\nconst SinglePost = (props) => {\r\n    const postId = props.match.params.postId;\r\n    const { user } = useContext(AuthContext);\r\n    const [redirect, setRedirect] = useState();\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    const [createComment] = useMutation(CREATE_COMMENT_MUTATION, {\r\n        update() {\r\n            setComment(\"\");\r\n        },\r\n        variables: {\r\n            postId,\r\n            body: comment,\r\n        },\r\n    });\r\n\r\n    const { subscribeToMore, data, loading, error } = useQuery(\r\n        FETCH_POST_QUERY,\r\n        {\r\n            variables: { postId },\r\n        }\r\n    );\r\n\r\n    /*\r\n        NEW COMMENT SUBSCRIPTIONS\r\n    */\r\n    const subscribeToNewComment = useCallback(\r\n        () =>\r\n            subscribeToMore({\r\n                document: CREATE_COMMENT_SUBSCRIPTION,\r\n            }),\r\n        [subscribeToMore]\r\n    );\r\n\r\n    /*\r\n        DELETE COMMENT SUBSCRIPTIONS\r\n    */\r\n    const subscribeToDeleteComment = useCallback(\r\n        () =>\r\n            subscribeToMore({\r\n                document: DELETE_COMMENT_SUBSCRIPTION,\r\n            }),\r\n        [subscribeToMore]\r\n    );\r\n\r\n    /*\r\n        LIKE POST SUBSCRIPTIONS\r\n    */\r\n    const subscribeToLikePost = useCallback(\r\n        () =>\r\n            subscribeToMore({\r\n                document: LIKE_SUBSCRIPTION,\r\n            }),\r\n        [subscribeToMore]\r\n    );\r\n\r\n    useEffect(() => {\r\n        subscribeToNewComment();\r\n        subscribeToDeleteComment();\r\n        subscribeToLikePost();\r\n    }, [subscribeToNewComment, subscribeToDeleteComment, subscribeToLikePost]);\r\n\r\n    const callbackDelete = () => {\r\n        setRedirect(true);\r\n    };\r\n\r\n    if (loading) return \"Loading...\";\r\n    if (error) return `Error! ${error.message}`;\r\n\r\n    return data ? (\r\n        <>\r\n            {redirect && <Redirect to=\"/\" />}\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column width={2}>\r\n                        <Image\r\n                            src=\"https://react.semantic-ui.com/images/avatar/large/elliot.jpg\"\r\n                            size=\"small\"\r\n                            floated=\"right\"\r\n                        />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={8}>\r\n                        <Card fluid>\r\n                            <Card.Content>\r\n                                <Card.Header>\r\n                                    {data.getPost.username}\r\n                                </Card.Header>\r\n                                <Card.Meta>\r\n                                    {moment(data.getPost.createdAt).fromNow()}\r\n                                </Card.Meta>\r\n                                <Card.Description>\r\n                                    {data.getPost.body}\r\n                                </Card.Description>\r\n                            </Card.Content>\r\n                            <hr />\r\n                            <Card.Content>\r\n                                <LikeButton\r\n                                    user={user}\r\n                                    post={{\r\n                                        id: data.getPost.id,\r\n                                        likeCount: data.getPost.likeCount,\r\n                                        likes: data.getPost.likes,\r\n                                    }}\r\n                                />\r\n                                <MyPopup content=\"Comment on post\">\r\n                                    <Button\r\n                                        basic\r\n                                        color=\"blue\"\r\n                                        as=\"div\"\r\n                                        labelPosition=\"right\"\r\n                                        onClick={() =>\r\n                                            console.log(\"Comment on post\")\r\n                                        }\r\n                                    >\r\n                                        <Button color=\"teal\" basic>\r\n                                            <Icon\r\n                                                name=\"comments\"\r\n                                                style={{ margin: 0 }}\r\n                                            />\r\n                                        </Button>\r\n                                        <Label\r\n                                            basic\r\n                                            color=\"blue\"\r\n                                            pointing=\"left\"\r\n                                        >\r\n                                            {data.getPost.commentCount}\r\n                                        </Label>\r\n                                    </Button>\r\n                                </MyPopup>\r\n                                {user &&\r\n                                    user.username === data.getPost.username && (\r\n                                        <DeleteButton\r\n                                            postId={data.getPost.id}\r\n                                            callback={callbackDelete}\r\n                                        />\r\n                                    )}\r\n                            </Card.Content>\r\n                        </Card>\r\n                        {user && (\r\n                            <Card fluid>\r\n                                <Card.Content>\r\n                                    <p>Post a comment</p>\r\n                                    <Form>\r\n                                        <div className=\"ui action input fluid\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                placeholder=\"Comment...\"\r\n                                                name=\"comment\"\r\n                                                value={comment}\r\n                                                onChange={(e) =>\r\n                                                    setComment(e.target.value)\r\n                                                }\r\n                                            />\r\n                                            <button\r\n                                                type=\"submit\"\r\n                                                className=\"ui button teal\"\r\n                                                disabled={comment.trim() === \"\"}\r\n                                                onClick={createComment}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </Form>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        )}\r\n                        {data.getPost.comments.map((comment) => (\r\n                            <Card fluid key={comment.id}>\r\n                                <Card.Content>\r\n                                    {user &&\r\n                                        user.username === comment.username && (\r\n                                            <DeleteButton\r\n                                                postId={data.getPost.id}\r\n                                                commentId={comment.id}\r\n                                            />\r\n                                        )}\r\n                                    <Card.Header>\r\n                                        {comment.username}\r\n                                    </Card.Header>\r\n                                    <Card.Meta>\r\n                                        {moment(comment.createdAt).fromNow()}\r\n                                    </Card.Meta>\r\n                                    <Card.Description>\r\n                                        {comment.body}\r\n                                    </Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>\r\n    ) : (\r\n        <p>Loading...</p>\r\n    );\r\n};\r\n\r\nexport default SinglePost;\r\n","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\LikeButton.js",["106"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation, gql } from \"@apollo/client\";\r\nimport { Button, Icon, Label } from \"semantic-ui-react\";\r\nimport { LIKE_POST_MUTATION } from \"../util/graphql\";\r\nimport MyPopup from \"../util/MyPopup\";\r\n\r\nconst LikeButton = ({ user, post: { id, likeCount, likes } }) => {\r\n    const [liked, setLiked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (user && likes.find((like) => like.username === user.username)) {\r\n            setLiked(true);\r\n        } else {\r\n            setLiked(false);\r\n        }\r\n    }, [user, likes]);\r\n\r\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n        variables: { postId: id },\r\n    });\r\n\r\n    const likeButton = user ? (\r\n        liked ? (\r\n            <Button color=\"teal\">\r\n                <Icon name=\"heart\" style={{ margin: 0 }} />\r\n            </Button>\r\n        ) : (\r\n            <Button color=\"teal\" basic>\r\n                <Icon name=\"heart\" style={{ margin: 0 }} />\r\n            </Button>\r\n        )\r\n    ) : (\r\n        <Button as={Link} to={`/login`} color=\"teal\" basic>\r\n            <Icon name=\"heart\" style={{ margin: 0 }} />\r\n        </Button>\r\n    );\r\n\r\n    return (\r\n        <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\r\n            <MyPopup content=\"Like on post\">{likeButton}</MyPopup>\r\n            <Label basic color=\"teal\" pointing=\"left\">\r\n                {likeCount}\r\n            </Label>\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default LikeButton;\r\n","C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\util\\MyPopup.js",[],"C:\\Users\\alfath\\Documents\\Web Development\\Development\\MERN\\social-media\\client\\src\\components\\DeleteButton.js",["107","108","109","110","111"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Confirm, Icon, Popup } from \"semantic-ui-react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useMutation, gql } from \"@apollo/client\";\r\nimport { DELETE_COMMENT_MUTATION, DELETE_POST_MUTATION } from \"../util/graphql\";\r\nimport MyPopup from \"../util/MyPopup\";\r\n\r\nconst DeleteButton = ({ postId, commentId, callback }) => {\r\n    const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\r\n\r\n    const [deletePostOrComment] = useMutation(mutation, {\r\n        update() {\r\n            setConfirmOpen(false);\r\n            if (!commentId) {\r\n            }\r\n            if (callback) {\r\n                callback();\r\n            }\r\n        },\r\n        variables: {\r\n            postId,\r\n            commentId,\r\n        },\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <MyPopup content={commentId ? \"Delete comment\" : \"Delete post\"}>\r\n                <Button\r\n                    as=\"div\"\r\n                    color=\"red\"\r\n                    floated=\"right\"\r\n                    onClick={() => setConfirmOpen(true)}\r\n                >\r\n                    <Icon name=\"trash\" style={{ margin: 0 }} />\r\n                </Button>\r\n            </MyPopup>\r\n\r\n            <Confirm\r\n                open={confirmOpen}\r\n                onCancel={() => setConfirmOpen(false)}\r\n                onConfirm={deletePostOrComment}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeleteButton;\r\n",{"ruleId":"112","severity":1,"message":"113","line":1,"column":8,"nodeType":"114","messageId":"115","endLine":1,"endColumn":13},{"ruleId":"112","severity":1,"message":"116","line":3,"column":8,"nodeType":"114","messageId":"115","endLine":3,"endColumn":11},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"112","severity":1,"message":"121","line":1,"column":29,"nodeType":"114","messageId":"115","endLine":1,"endColumn":37},{"ruleId":"112","severity":1,"message":"122","line":3,"column":5,"nodeType":"114","messageId":"115","endLine":3,"endColumn":8},{"ruleId":"112","severity":1,"message":"123","line":5,"column":5,"nodeType":"114","messageId":"115","endLine":5,"endColumn":20},{"ruleId":"112","severity":1,"message":"124","line":6,"column":5,"nodeType":"114","messageId":"115","endLine":6,"endColumn":18},{"ruleId":"112","severity":1,"message":"125","line":7,"column":5,"nodeType":"114","messageId":"115","endLine":7,"endColumn":20},{"ruleId":"112","severity":1,"message":"126","line":20,"column":5,"nodeType":"114","messageId":"115","endLine":20,"endColumn":29},{"ruleId":"112","severity":1,"message":"127","line":2,"column":16,"nodeType":"114","messageId":"115","endLine":2,"endColumn":23},{"ruleId":"112","severity":1,"message":"128","line":2,"column":44,"nodeType":"114","messageId":"115","endLine":2,"endColumn":49},{"ruleId":"112","severity":1,"message":"113","line":1,"column":8,"nodeType":"114","messageId":"115","endLine":1,"endColumn":13},{"ruleId":"112","severity":1,"message":"121","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"122","line":5,"column":8,"nodeType":"114","messageId":"115","endLine":5,"endColumn":11},{"ruleId":"112","severity":1,"message":"129","line":6,"column":32,"nodeType":"114","messageId":"115","endLine":6,"endColumn":49},{"ruleId":"112","severity":1,"message":"130","line":15,"column":26,"nodeType":"114","messageId":"115","endLine":15,"endColumn":31},{"ruleId":"112","severity":1,"message":"131","line":6,"column":5,"nodeType":"114","messageId":"115","endLine":6,"endColumn":11},{"ruleId":"112","severity":1,"message":"122","line":8,"column":10,"nodeType":"114","messageId":"115","endLine":8,"endColumn":13},{"ruleId":"112","severity":1,"message":"132","line":16,"column":5,"nodeType":"114","messageId":"115","endLine":16,"endColumn":10},{"ruleId":"112","severity":1,"message":"133","line":28,"column":5,"nodeType":"114","messageId":"115","endLine":28,"endColumn":24},{"ruleId":"112","severity":1,"message":"122","line":3,"column":23,"nodeType":"114","messageId":"115","endLine":3,"endColumn":26},{"ruleId":"112","severity":1,"message":"134","line":1,"column":27,"nodeType":"114","messageId":"115","endLine":1,"endColumn":36},{"ruleId":"112","severity":1,"message":"128","line":2,"column":33,"nodeType":"114","messageId":"115","endLine":2,"endColumn":38},{"ruleId":"112","severity":1,"message":"135","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":14},{"ruleId":"112","severity":1,"message":"136","line":3,"column":16,"nodeType":"114","messageId":"115","endLine":3,"endColumn":24},{"ruleId":"112","severity":1,"message":"122","line":4,"column":23,"nodeType":"114","messageId":"115","endLine":4,"endColumn":26},"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'App' is defined but never used.","no-native-reassign",["137"],"no-negated-in-lhs",["138"],"'useState' is defined but never used.","'gql' is defined but never used.","'useSubscription' is defined but never used.","'NetworkStatus' is defined but never used.","'useApolloClient' is defined but never used.","'FETCH_POSTS_SUBSCRIPTION' is defined but never used.","'Segment' is defined but never used.","'Popup' is defined but never used.","'FETCH_POSTS_QUERY' is defined but never used.","'error' is assigned a value but never used.","'useRef' is defined but never used.","'Input' is defined but never used.","'DELETE_SUBSCRIPTION' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","no-global-assign","no-unsafe-negation"]